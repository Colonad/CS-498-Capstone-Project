Compiling tobi:

clang++ -g -O3 tobi.cpp `llvm-config --cxxflags --ldflags --system-libs --libs all` -o tobi

Compiling main:

clang++ main.cpp output.o -o main


Test Cases:

Average function:
def average(x y) (x + y) * 0.5;

#function call
average(2 , 4)


Quadratic function:
def quad(a b) a*a + 2*a*b + b*b;

#function call
quad(2, 2)

Fibonacci function:

def fib(x)
  if x < 3 then
    1
  else
    fib(x-1)+fib(x-2);

#function call
fib(4)


Printstar:

extern putchard(char);
def printstar(n)
  for i = 1, i < n, 1.0 in
    putchard(42); 

#function call
printstar(100)

Mandelbrot set:

extern putchard(char);
extern printd(x);

# Logical not.
def unary!(v)
  if v then
    0
  else
    1;

# negation
def unary-(v)
  0-v;

# Define inequalities
def binary> 10 (LHS RHS)
  RHS < LHS;

# Logic or, which does not short circuit.
def binary| 5 (LHS RHS)
  if LHS then
    1
  else if RHS then
    1
  else
    0;

# Logic and, which does not short circuit.
def binary& 6 (LHS RHS)
  if !LHS then
    0
  else
    !!RHS;

# Define = with slightly lower precedence than relationals.
def binary = 9 (LHS RHS)
  !(LHS < RHS | LHS > RHS);

# Define ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
def binary : 1 (x y) y;


#printdensity stuff
def printdensity(d)
  if d > 8 then
    putchard(32)  # ' '
  else if d > 4 then
    putchard(46)  # '.'
  else if d > 2 then
    putchard(43)  # '+'
  else
    putchard(42); # '*'

#mandelbrot stuff
def mandelconverger(real imag iters creal cimag)
  if iters > 255 | (real*real + imag*imag > 4) then
    iters
  else
    mandelconverger(real*real - imag*imag + creal,
                    2*real*imag + cimag,
                    iters+1, creal, cimag);


def mandelconverge(real imag)
  mandelconverger(real, imag, 0, real, imag);

def mandelhelp(xmin xmax xstep   ymin ymax ystep)
  for y = ymin, y < ymax, ystep in (
    (for x = xmin, x < xmax, xstep in
       printdensity(mandelconverge(x,y)))
    : putchard(10)
  );


def mandel(realstart imagstart realmag imagmag)
  mandelhelp(realstart, realstart+realmag*78, realmag,
             imagstart, imagstart+imagmag*40, imagmag);


#function call
mandel(-2.3, -1.3, 0.05, 0.07)
mandel(-2, -1, 0.02, 0.04)
mandel(-0.9, -1.4, 0.02, 0.03)


Iterative fibonacci function:

# Logical not.
def unary!(v)
  if v then
    0
  else
    1;

# negation
def unary-(v)
  0-v;

# Define inequalities
def binary> 10 (LHS RHS)
  RHS < LHS;

# Logic or, which does not short circuit.
def binary| 5 (LHS RHS)
  if LHS then
    1
  else if RHS then
    1
  else
    0;

# Logic and, which does not short circuit.
def binary& 6 (LHS RHS)
  if !LHS then
    0
  else
    !!RHS;

# Define = with slightly lower precedence than relationals.
def binary = 9 (LHS RHS)
  !(LHS < RHS | LHS > RHS);

# Define ':' for sequencing: as a low-precedence operator that ignores operands
# and just returns the RHS.
def binary : 1 (x y) y;

def fibi(x)
  var a = 1, b = 1, c in
  (for i = 3, i < x in
     c = a + b :
     a = b :
     b = c) :
  b;

#function call 
fibi(4)
